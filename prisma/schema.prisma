generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model area_venues {
  id         BigInt   @id @default(autoincrement())
  area_id    BigInt?
  venue_id   BigInt?
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)

  @@index([area_id], map: "index_area_venues_on_area_id")
  @@index([venue_id], map: "index_area_venues_on_venue_id")
}

model areas {
  id                    BigInt    @id @default(autoincrement())
  country_code          String?   @db.VarChar
  name                  String?   @db.VarChar
  latitude              Float?
  longitude             Float?
  radius                Float?
  created_at            DateTime  @db.Timestamp(6)
  updated_at            DateTime  @db.Timestamp(6)
  last_activity_on      DateTime? @db.Date
  summary_email_sent_at DateTime  @default(now()) @db.Timestamp(6)
  summary_metadata      Json?     @default("\"{}\"")
  time_zone             String?   @db.VarChar
  region_id             BigInt?
  subtitle              String?   @db.VarChar

  @@index([region_id], map: "index_areas_on_region_id")
}

model audits {
  id              BigInt   @id @default(autoincrement())
  category        Int      @default(0)
  parent_type     String?  @db.VarChar
  parent_id       BigInt?
  person_type     String?  @db.VarChar
  person_id       BigInt?
  replies_to_id   BigInt?
  replied_by_id   BigInt?
  conversation_id BigInt?
  data            Json?
  created_at      DateTime @db.Timestamp(6)
  updated_at      DateTime @db.Timestamp(6)

  @@index([category], map: "index_audits_on_category")
  @@index([conversation_id], map: "index_audits_on_conversation_id")
  @@index([parent_type, parent_id], map: "index_audits_on_parent")
  @@index([person_type, person_id], map: "index_audits_on_person")
  @@index([replied_by_id], map: "index_audits_on_replied_by_id")
  @@index([replies_to_id], map: "index_audits_on_replies_to_id")
}

model clients {
  id               BigInt    @id @default(autoincrement())
  label            String    @db.VarChar
  config           Json      @default("{}")
  manager_id       BigInt
  public_key       String    @db.VarChar
  secret_key       String    @db.VarChar
  enabled          Boolean   @default(true)
  last_accessed_at DateTime? @db.Timestamp(6)
  created_at       DateTime  @db.Timestamp(6)
  updated_at       DateTime  @db.Timestamp(6)
  location_type    String?   @db.VarChar
  location_id      BigInt?

  @@index([location_type, location_id], map: "index_clients_on_location")
  @@index([manager_id], map: "index_clients_on_manager_id")
}

model conversations {
  id                  BigInt    @id @default(autoincrement())
  marked_complete_at  DateTime? @db.Timestamp(6)
  last_response_at    DateTime? @default(now()) @db.Timestamp(6)
  last_responder_type String?   @db.VarChar
  last_responder_id   BigInt?
  parent_type         String?   @db.VarChar
  parent_id           BigInt?
  uuid                String    @db.VarChar
  created_at          DateTime  @db.Timestamp(6)
  updated_at          DateTime  @db.Timestamp(6)

  @@index([last_responder_type, last_responder_id], map: "index_conversations_on_last_responder")
  @@index([parent_type, parent_id], map: "index_conversations_on_parent")
  @@index([uuid], map: "index_conversations_on_uuid")
}

model countries {
  id                    BigInt    @id @default(autoincrement())
  country_code          String    @unique(map: "index_countries_on_country_code") @db.VarChar
  created_at            DateTime  @db.Timestamp(6)
  updated_at            DateTime  @db.Timestamp(6)
  enable_regions        Boolean?
  last_activity_on      DateTime? @db.Date
  summary_email_sent_at DateTime  @default(now()) @db.Timestamp(6)
  summary_metadata      Json?     @default("\"{}\"")
  default_language_code String?   @db.VarChar(2)
  name                  String?   @db.VarChar
  enable_custom_regions Boolean?  @default(false)
  geojson               Json?
  osm_id                String?   @db.VarChar
  translations          Json      @default("{}") @db.Json
  bounds                String[]  @default([]) @db.VarChar
  mailing_list          Json      @default("{}")
}

model events {
  id                          BigInt    @id @default(autoincrement())
  category                    Int?      @default(0)
  custom_name                 String?   @db.VarChar
  room                        String?   @db.VarChar
  description                 String?   @db.VarChar(600)
  created_at                  DateTime  @db.Timestamp(6)
  updated_at                  DateTime  @db.Timestamp(6)
  images                      Json?
  manager_id                  BigInt?
  published                   Boolean?  @default(true)
  latest_registration_at      DateTime? @db.Timestamp(6)
  registration_mode           Int?      @default(0)
  registration_url            String?   @db.VarChar
  language_code               String?   @db.VarChar(2)
  online_url                  String?   @db.VarChar
  status_email_sent_at        DateTime  @default(now()) @db.Timestamp(6)
  registrations_email_sent_at DateTime  @default(now()) @db.Timestamp(6)
  should_update_status_at     DateTime? @default(now()) @db.Timestamp(6)
  verified_at                 DateTime? @default(now()) @db.Timestamp(6)
  expired_at                  DateTime? @db.Timestamp(6)
  archived_at                 DateTime? @db.Timestamp(6)
  finished_at                 DateTime? @db.Timestamp(6)
  status                      Int       @default(0)
  phone_name                  String?   @db.VarChar
  phone_number                String?   @db.VarChar
  registration_limit          Int?
  type                        String?   @db.VarChar
  venue_id                    BigInt?
  area_id                     BigInt?
  registration_notification   Int       @default(0)
  registration_question       Int       @default(1)
  contact_info                Json      @default("{}")
  expiration_period           Int       @default(3)
  verification_streak         Int       @default(0)
  recurrence_data             Json?     @default("{}") @db.Json
  finish_date                 DateTime? @db.Date

  @@index([area_id], map: "index_events_on_area_id")
  @@index([manager_id], map: "index_events_on_manager_id")
  @@index([status], map: "index_events_on_status")
  @@index([venue_id], map: "index_events_on_venue_id")
}

model managed_records {
  manager_id     Int?
  record_id      Int?
  record_type    String?  @db.VarChar
  id             BigInt   @id @default(autoincrement())
  assigned_by_id Int?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)

  @@index([record_id, record_type], map: "index_managed_records_on_record_id_and_record_type")
}

model managers {
  id                         BigInt    @id @default(autoincrement())
  name                       String?   @db.VarChar
  email                      String?   @unique(map: "index_managers_on_email") @db.VarChar
  created_at                 DateTime  @db.Timestamp(6)
  updated_at                 DateTime  @db.Timestamp(6)
  administrator              Boolean?
  language_code              String?   @default("EN") @db.VarChar(2)
  last_login_at              DateTime? @db.Timestamp(6)
  email_verified             Boolean?
  email_verification_sent_at DateTime? @db.Timestamp(6)
  contact_method             Int       @default(0)
  phone                      String?   @unique(map: "index_managers_on_phone") @db.VarChar
  phone_verified             Boolean?  @default(false)
  phone_verification_sent_at DateTime? @db.Timestamp(6)
  contact_settings           Json?     @default("{}") @db.Json
  notifications              Int       @default(2147483647)
}

model passwordless_sessions {
  id                   BigInt    @id @default(autoincrement())
  authenticatable_type String?   @db.VarChar
  authenticatable_id   BigInt?
  timeout_at           DateTime  @db.Timestamp(6)
  expires_at           DateTime  @db.Timestamp(6)
  claimed_at           DateTime? @db.Timestamp(6)
  created_at           DateTime  @db.Timestamp(6)
  updated_at           DateTime  @db.Timestamp(6)
  token_digest         String?   @db.VarChar
  identifier           String?   @unique(map: "index_passwordless_sessions_on_identifier") @db.VarChar

  @@index([authenticatable_type, authenticatable_id], map: "authenticatable")
  @@index([token_digest], map: "index_passwordless_sessions_on_token_digest")
}

model pictures {
  id          BigInt   @id @default(autoincrement())
  parent_type String?  @db.VarChar
  parent_id   BigInt?
  file        Json?
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)

  @@index([parent_type, parent_id], map: "index_pictures_on_parent")
}

model regions {
  id                    BigInt    @id @default(autoincrement())
  country_code          String    @db.VarChar
  created_at            DateTime  @db.Timestamp(6)
  updated_at            DateTime  @db.Timestamp(6)
  last_activity_on      DateTime? @db.Date
  summary_email_sent_at DateTime  @default(now()) @db.Timestamp(6)
  summary_metadata      Json?     @default("\"{}\"")
  geojson               Json?
  name                  String?   @db.VarChar
  osm_id                String?   @db.VarChar
  translations          Json      @default("{}") @db.Json
  bounds                String[]  @default([]) @db.VarChar
}

model registrations {
  id                         BigInt    @id @default(autoincrement())
  event_id                   BigInt?
  created_at                 DateTime  @db.Timestamp(6)
  updated_at                 DateTime  @db.Timestamp(6)
  starting_at                DateTime? @db.Timestamp(6)
  time_zone                  String?   @db.VarChar
  questions                  Json?     @default("{}")
  user_id                    BigInt?
  mailing_list_subscribed_at DateTime? @db.Timestamp(6)
  reminder_sent_at           DateTime? @db.Timestamp(6)
  followup_sent_at           DateTime? @db.Timestamp(6)
  uuid                       String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  next_reminder_at           DateTime  @db.Timestamp(6)

  @@index([event_id], map: "index_registrations_on_event_id")
  @@index([user_id], map: "index_registrations_on_user_id")
}

model users {
  id         BigInt   @id @default(autoincrement())
  email      String   @db.VarChar
  name       String   @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model venues {
  id               BigInt    @id @default(autoincrement())
  name             String?   @db.VarChar
  latitude         Float?
  longitude        Float?
  street           String?   @db.VarChar
  city             String?   @db.VarChar
  country_code     String?   @db.VarChar
  post_code        String?   @db.VarChar
  created_at       DateTime  @db.Timestamp(6)
  updated_at       DateTime  @db.Timestamp(6)
  region_code      String?   @db.VarChar(3)
  place_id         String?   @unique(map: "index_venues_on_place_id") @db.VarChar
  last_activity_on DateTime? @db.Date
  time_zone        String?   @db.VarChar
}
